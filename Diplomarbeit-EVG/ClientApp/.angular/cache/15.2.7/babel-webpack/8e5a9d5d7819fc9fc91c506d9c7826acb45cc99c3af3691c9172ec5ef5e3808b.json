{"ast":null,"code":"import StringBuilder from '../../util/StringBuilder';\nimport SymbolInfo from './SymbolInfo';\nvar EncoderContext = /** @class */function () {\n  function EncoderContext(msg) {\n    this.msg = msg;\n    this.pos = 0;\n    this.skipAtEnd = 0;\n    // From this point on Strings are not Unicode anymore!\n    var msgBinary = msg.split('').map(function (c) {\n      return c.charCodeAt(0);\n    });\n    var sb = new StringBuilder();\n    for (var i = 0, c = msgBinary.length; i < c; i++) {\n      var ch = String.fromCharCode(msgBinary[i] & 0xff);\n      if (ch === '?' && msg.charAt(i) !== '?') {\n        throw new Error('Message contains characters outside ISO-8859-1 encoding.');\n      }\n      sb.append(ch);\n    }\n    this.msg = sb.toString(); // Not Unicode here!\n    this.shape = 0 /* FORCE_NONE */;\n    this.codewords = new StringBuilder();\n    this.newEncoding = -1;\n  }\n  EncoderContext.prototype.setSymbolShape = function (shape) {\n    this.shape = shape;\n  };\n  EncoderContext.prototype.setSizeConstraints = function (minSize, maxSize) {\n    this.minSize = minSize;\n    this.maxSize = maxSize;\n  };\n  EncoderContext.prototype.getMessage = function () {\n    return this.msg;\n  };\n  EncoderContext.prototype.setSkipAtEnd = function (count) {\n    this.skipAtEnd = count;\n  };\n  EncoderContext.prototype.getCurrentChar = function () {\n    return this.msg.charCodeAt(this.pos);\n  };\n  EncoderContext.prototype.getCurrent = function () {\n    return this.msg.charCodeAt(this.pos);\n  };\n  EncoderContext.prototype.getCodewords = function () {\n    return this.codewords;\n  };\n  EncoderContext.prototype.writeCodewords = function (codewords) {\n    this.codewords.append(codewords);\n  };\n  EncoderContext.prototype.writeCodeword = function (codeword) {\n    this.codewords.append(codeword);\n  };\n  EncoderContext.prototype.getCodewordCount = function () {\n    return this.codewords.length();\n  };\n  EncoderContext.prototype.getNewEncoding = function () {\n    return this.newEncoding;\n  };\n  EncoderContext.prototype.signalEncoderChange = function (encoding) {\n    this.newEncoding = encoding;\n  };\n  EncoderContext.prototype.resetEncoderSignal = function () {\n    this.newEncoding = -1;\n  };\n  EncoderContext.prototype.hasMoreCharacters = function () {\n    return this.pos < this.getTotalMessageCharCount();\n  };\n  EncoderContext.prototype.getTotalMessageCharCount = function () {\n    return this.msg.length - this.skipAtEnd;\n  };\n  EncoderContext.prototype.getRemainingCharacters = function () {\n    return this.getTotalMessageCharCount() - this.pos;\n  };\n  EncoderContext.prototype.getSymbolInfo = function () {\n    return this.symbolInfo;\n  };\n  EncoderContext.prototype.updateSymbolInfo = function (len) {\n    if (len === void 0) {\n      len = this.getCodewordCount();\n    }\n    if (this.symbolInfo == null || len > this.symbolInfo.getDataCapacity()) {\n      this.symbolInfo = SymbolInfo.lookup(len, this.shape, this.minSize, this.maxSize, true);\n    }\n  };\n  EncoderContext.prototype.resetSymbolInfo = function () {\n    this.symbolInfo = null;\n  };\n  return EncoderContext;\n}();\nexport { EncoderContext };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}