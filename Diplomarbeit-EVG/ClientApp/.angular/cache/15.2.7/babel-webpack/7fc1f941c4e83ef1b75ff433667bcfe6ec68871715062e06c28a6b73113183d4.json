{"ast":null,"code":"/*\n * Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/*namespace com.google.zxing.oned {*/\nimport BarcodeFormat from '../BarcodeFormat';\nimport NotFoundException from '../NotFoundException';\nimport OneDReader from './OneDReader';\nimport Result from '../Result';\nimport ResultPoint from '../ResultPoint';\n/**\n * <p>Decodes CodaBar barcodes. </p>\n *\n * @author Evan @dodobelieve\n * @see CodaBarReader\n */\nvar CodaBarReader = /** @class */function (_super) {\n  __extends(CodaBarReader, _super);\n  function CodaBarReader() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.CODA_BAR_CHAR_SET = {\n      nnnnnww: '0',\n      nnnnwwn: '1',\n      nnnwnnw: '2',\n      wwnnnnn: '3',\n      nnwnnwn: '4',\n      wnnnnwn: '5',\n      nwnnnnw: '6',\n      nwnnwnn: '7',\n      nwwnnnn: '8',\n      wnnwnnn: '9',\n      nnnwwnn: '-',\n      nnwwnnn: '$',\n      wnnnwnw: ':',\n      wnwnnnw: '/',\n      wnwnwnn: '.',\n      nnwwwww: '+',\n      nnwwnwn: 'A',\n      nwnwnnw: 'B',\n      nnnwnww: 'C',\n      nnnwwwn: 'D'\n    };\n    return _this;\n  }\n  CodaBarReader.prototype.decodeRow = function (rowNumber, row, hints) {\n    var validRowData = this.getValidRowData(row);\n    if (!validRowData) throw new NotFoundException();\n    var retStr = this.codaBarDecodeRow(validRowData.row);\n    if (!retStr) throw new NotFoundException();\n    return new Result(retStr, null, 0, [new ResultPoint(validRowData.left, rowNumber), new ResultPoint(validRowData.right, rowNumber)], BarcodeFormat.CODABAR, new Date().getTime());\n  };\n  /**\n   * converts bit array to valid data array(lengths of black bits and white bits)\n   * @param row bit array to convert\n   */\n  CodaBarReader.prototype.getValidRowData = function (row) {\n    var booleanArr = row.toArray();\n    var startIndex = booleanArr.indexOf(true);\n    if (startIndex === -1) return null;\n    var lastIndex = booleanArr.lastIndexOf(true);\n    if (lastIndex <= startIndex) return null;\n    booleanArr = booleanArr.slice(startIndex, lastIndex + 1);\n    var result = [];\n    var lastBit = booleanArr[0];\n    var bitLength = 1;\n    for (var i = 1; i < booleanArr.length; i++) {\n      if (booleanArr[i] === lastBit) {\n        bitLength++;\n      } else {\n        lastBit = booleanArr[i];\n        result.push(bitLength);\n        bitLength = 1;\n      }\n    }\n    result.push(bitLength);\n    // CodaBar code data valid\n    if (result.length < 23 && (result.length + 1) % 8 !== 0) return null;\n    return {\n      row: result,\n      left: startIndex,\n      right: lastIndex\n    };\n  };\n  /**\n   * decode codabar code\n   * @param row row to cecode\n   */\n  CodaBarReader.prototype.codaBarDecodeRow = function (row) {\n    var code = [];\n    var barThreshold = Math.ceil(row.reduce(function (pre, item) {\n      return (pre + item) / 2;\n    }, 0));\n    // Read one encoded character at a time.\n    while (row.length > 0) {\n      var seg = row.splice(0, 8).splice(0, 7);\n      var key = seg.map(function (len) {\n        return len < barThreshold ? 'n' : 'w';\n      }).join('');\n      if (this.CODA_BAR_CHAR_SET[key] === undefined) return null;\n      code.push(this.CODA_BAR_CHAR_SET[key]);\n    }\n    var strCode = code.join('');\n    if (this.validCodaBarString(strCode)) return strCode;\n    return null;\n  };\n  /**\n   * check if the string is a CodaBar string\n   * @param src string to determine\n   */\n  CodaBarReader.prototype.validCodaBarString = function (src) {\n    var reg = /^[A-D].{1,}[A-D]$/;\n    return reg.test(src);\n  };\n  return CodaBarReader;\n}(OneDReader);\nexport default CodaBarReader;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}