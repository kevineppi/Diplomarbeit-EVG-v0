{"ast":null,"code":"import StringUtils from '../../common/StringUtils';\nimport StringBuilder from '../../util/StringBuilder';\nimport HighLevelEncoder from './HighLevelEncoder';\nimport { BASE256_ENCODATION, ASCII_ENCODATION } from './constants';\nvar Base256Encoder = /** @class */function () {\n  function Base256Encoder() {}\n  Base256Encoder.prototype.getEncodingMode = function () {\n    return BASE256_ENCODATION;\n  };\n  Base256Encoder.prototype.encode = function (context) {\n    var buffer = new StringBuilder();\n    buffer.append(0); // Initialize length field\n    while (context.hasMoreCharacters()) {\n      var c = context.getCurrentChar();\n      buffer.append(c);\n      context.pos++;\n      var newMode = HighLevelEncoder.lookAheadTest(context.getMessage(), context.pos, this.getEncodingMode());\n      if (newMode !== this.getEncodingMode()) {\n        // Return to ASCII encodation, which will actually handle latch to new mode\n        context.signalEncoderChange(ASCII_ENCODATION);\n        break;\n      }\n    }\n    var dataCount = buffer.length() - 1;\n    var lengthFieldSize = 1;\n    var currentSize = context.getCodewordCount() + dataCount + lengthFieldSize;\n    context.updateSymbolInfo(currentSize);\n    var mustPad = context.getSymbolInfo().getDataCapacity() - currentSize > 0;\n    if (context.hasMoreCharacters() || mustPad) {\n      if (dataCount <= 249) {\n        buffer.setCharAt(0, StringUtils.getCharAt(dataCount));\n      } else if (dataCount <= 1555) {\n        buffer.setCharAt(0, StringUtils.getCharAt(Math.floor(dataCount / 250) + 249));\n        buffer.insert(1, StringUtils.getCharAt(dataCount % 250));\n      } else {\n        throw new Error('Message length not in valid ranges: ' + dataCount);\n      }\n    }\n    for (var i = 0, c = buffer.length(); i < c; i++) {\n      context.writeCodeword(this.randomize255State(buffer.charAt(i).charCodeAt(0), context.getCodewordCount() + 1));\n    }\n  };\n  Base256Encoder.prototype.randomize255State = function (ch, codewordPosition) {\n    var pseudoRandom = 149 * codewordPosition % 255 + 1;\n    var tempVariable = ch + pseudoRandom;\n    if (tempVariable <= 255) {\n      return tempVariable;\n    } else {\n      return tempVariable - 256;\n    }\n  };\n  return Base256Encoder;\n}();\nexport { Base256Encoder };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}