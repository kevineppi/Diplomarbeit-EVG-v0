{"ast":null,"code":"import { ASCII_ENCODATION, BASE256_ENCODATION, C40_ENCODATION, EDIFACT_ENCODATION, LATCH_TO_ANSIX12, LATCH_TO_BASE256, LATCH_TO_C40, LATCH_TO_EDIFACT, LATCH_TO_TEXT, TEXT_ENCODATION, UPPER_SHIFT, X12_ENCODATION } from './constants';\n// tslint:disable-next-line:no-circular-imports\nimport HighLevelEncoder from './HighLevelEncoder';\nvar ASCIIEncoder = /** @class */function () {\n  function ASCIIEncoder() {}\n  ASCIIEncoder.prototype.getEncodingMode = function () {\n    return ASCII_ENCODATION;\n  };\n  ASCIIEncoder.prototype.encode = function (context) {\n    // step B\n    var n = HighLevelEncoder.determineConsecutiveDigitCount(context.getMessage(), context.pos);\n    if (n >= 2) {\n      context.writeCodeword(this.encodeASCIIDigits(context.getMessage().charCodeAt(context.pos), context.getMessage().charCodeAt(context.pos + 1)));\n      context.pos += 2;\n    } else {\n      var c = context.getCurrentChar();\n      var newMode = HighLevelEncoder.lookAheadTest(context.getMessage(), context.pos, this.getEncodingMode());\n      if (newMode !== this.getEncodingMode()) {\n        switch (newMode) {\n          case BASE256_ENCODATION:\n            context.writeCodeword(LATCH_TO_BASE256);\n            context.signalEncoderChange(BASE256_ENCODATION);\n            return;\n          case C40_ENCODATION:\n            context.writeCodeword(LATCH_TO_C40);\n            context.signalEncoderChange(C40_ENCODATION);\n            return;\n          case X12_ENCODATION:\n            context.writeCodeword(LATCH_TO_ANSIX12);\n            context.signalEncoderChange(X12_ENCODATION);\n            break;\n          case TEXT_ENCODATION:\n            context.writeCodeword(LATCH_TO_TEXT);\n            context.signalEncoderChange(TEXT_ENCODATION);\n            break;\n          case EDIFACT_ENCODATION:\n            context.writeCodeword(LATCH_TO_EDIFACT);\n            context.signalEncoderChange(EDIFACT_ENCODATION);\n            break;\n          default:\n            throw new Error('Illegal mode: ' + newMode);\n        }\n      } else if (HighLevelEncoder.isExtendedASCII(c)) {\n        context.writeCodeword(UPPER_SHIFT);\n        context.writeCodeword(c - 128 + 1);\n        context.pos++;\n      } else {\n        context.writeCodeword(c + 1);\n        context.pos++;\n      }\n    }\n  };\n  ASCIIEncoder.prototype.encodeASCIIDigits = function (digit1, digit2) {\n    if (HighLevelEncoder.isDigit(digit1) && HighLevelEncoder.isDigit(digit2)) {\n      var num = (digit1 - 48) * 10 + (digit2 - 48);\n      return num + 130;\n    }\n    throw new Error('not digits: ' + digit1 + digit2);\n  };\n  return ASCIIEncoder;\n}();\nexport { ASCIIEncoder };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}