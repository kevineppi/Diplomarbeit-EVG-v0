{"ast":null,"code":"import Arrays from '../../util/Arrays';\n/**\n * Symbol Character Placement Program. Adapted from Annex M.1 in ISO/IEC 16022:2000(E).\n */\nvar DefaultPlacement = /** @class */function () {\n  /**\n   * Main constructor\n   *\n   * @param codewords the codewords to place\n   * @param numcols   the number of columns\n   * @param numrows   the number of rows\n   */\n  function DefaultPlacement(codewords, numcols, numrows) {\n    this.codewords = codewords;\n    this.numcols = numcols;\n    this.numrows = numrows;\n    this.bits = new Uint8Array(numcols * numrows);\n    Arrays.fill(this.bits, 2); // Initialize with \"not set\" value\n  }\n\n  DefaultPlacement.prototype.getNumrows = function () {\n    return this.numrows;\n  };\n  DefaultPlacement.prototype.getNumcols = function () {\n    return this.numcols;\n  };\n  DefaultPlacement.prototype.getBits = function () {\n    return this.bits;\n  };\n  DefaultPlacement.prototype.getBit = function (col, row) {\n    return this.bits[row * this.numcols + col] === 1;\n  };\n  DefaultPlacement.prototype.setBit = function (col, row, bit) {\n    this.bits[row * this.numcols + col] = bit ? 1 : 0;\n  };\n  DefaultPlacement.prototype.noBit = function (col, row) {\n    return this.bits[row * this.numcols + col] === 2;\n  };\n  DefaultPlacement.prototype.place = function () {\n    var pos = 0;\n    var row = 4;\n    var col = 0;\n    do {\n      // repeatedly first check for one of the special corner cases, then...\n      if (row === this.numrows && col === 0) {\n        this.corner1(pos++);\n      }\n      if (row === this.numrows - 2 && col === 0 && this.numcols % 4 !== 0) {\n        this.corner2(pos++);\n      }\n      if (row === this.numrows - 2 && col === 0 && this.numcols % 8 === 4) {\n        this.corner3(pos++);\n      }\n      if (row === this.numrows + 4 && col === 2 && this.numcols % 8 === 0) {\n        this.corner4(pos++);\n      }\n      // sweep upward diagonally, inserting successive characters...\n      do {\n        if (row < this.numrows && col >= 0 && this.noBit(col, row)) {\n          this.utah(row, col, pos++);\n        }\n        row -= 2;\n        col += 2;\n      } while (row >= 0 && col < this.numcols);\n      row++;\n      col += 3;\n      // and then sweep downward diagonally, inserting successive characters, ...\n      do {\n        if (row >= 0 && col < this.numcols && this.noBit(col, row)) {\n          this.utah(row, col, pos++);\n        }\n        row += 2;\n        col -= 2;\n      } while (row < this.numrows && col >= 0);\n      row += 3;\n      col++;\n      // ...until the entire array is scanned\n    } while (row < this.numrows || col < this.numcols);\n    // Lastly, if the lower right-hand corner is untouched, fill in fixed pattern\n    if (this.noBit(this.numcols - 1, this.numrows - 1)) {\n      this.setBit(this.numcols - 1, this.numrows - 1, true);\n      this.setBit(this.numcols - 2, this.numrows - 2, true);\n    }\n  };\n  DefaultPlacement.prototype.module = function (row, col, pos, bit) {\n    if (row < 0) {\n      row += this.numrows;\n      col += 4 - (this.numrows + 4) % 8;\n    }\n    if (col < 0) {\n      col += this.numcols;\n      row += 4 - (this.numcols + 4) % 8;\n    }\n    // Note the conversion:\n    var v = this.codewords.charCodeAt(pos);\n    v &= 1 << 8 - bit;\n    this.setBit(col, row, v !== 0);\n  };\n  /**\n   * Places the 8 bits of a utah-shaped symbol character in ECC200.\n   *\n   * @param row the row\n   * @param col the column\n   * @param pos character position\n   */\n  DefaultPlacement.prototype.utah = function (row, col, pos) {\n    this.module(row - 2, col - 2, pos, 1);\n    this.module(row - 2, col - 1, pos, 2);\n    this.module(row - 1, col - 2, pos, 3);\n    this.module(row - 1, col - 1, pos, 4);\n    this.module(row - 1, col, pos, 5);\n    this.module(row, col - 2, pos, 6);\n    this.module(row, col - 1, pos, 7);\n    this.module(row, col, pos, 8);\n  };\n  DefaultPlacement.prototype.corner1 = function (pos) {\n    this.module(this.numrows - 1, 0, pos, 1);\n    this.module(this.numrows - 1, 1, pos, 2);\n    this.module(this.numrows - 1, 2, pos, 3);\n    this.module(0, this.numcols - 2, pos, 4);\n    this.module(0, this.numcols - 1, pos, 5);\n    this.module(1, this.numcols - 1, pos, 6);\n    this.module(2, this.numcols - 1, pos, 7);\n    this.module(3, this.numcols - 1, pos, 8);\n  };\n  DefaultPlacement.prototype.corner2 = function (pos) {\n    this.module(this.numrows - 3, 0, pos, 1);\n    this.module(this.numrows - 2, 0, pos, 2);\n    this.module(this.numrows - 1, 0, pos, 3);\n    this.module(0, this.numcols - 4, pos, 4);\n    this.module(0, this.numcols - 3, pos, 5);\n    this.module(0, this.numcols - 2, pos, 6);\n    this.module(0, this.numcols - 1, pos, 7);\n    this.module(1, this.numcols - 1, pos, 8);\n  };\n  DefaultPlacement.prototype.corner3 = function (pos) {\n    this.module(this.numrows - 3, 0, pos, 1);\n    this.module(this.numrows - 2, 0, pos, 2);\n    this.module(this.numrows - 1, 0, pos, 3);\n    this.module(0, this.numcols - 2, pos, 4);\n    this.module(0, this.numcols - 1, pos, 5);\n    this.module(1, this.numcols - 1, pos, 6);\n    this.module(2, this.numcols - 1, pos, 7);\n    this.module(3, this.numcols - 1, pos, 8);\n  };\n  DefaultPlacement.prototype.corner4 = function (pos) {\n    this.module(this.numrows - 1, 0, pos, 1);\n    this.module(this.numrows - 1, this.numcols - 1, pos, 2);\n    this.module(0, this.numcols - 3, pos, 3);\n    this.module(0, this.numcols - 2, pos, 4);\n    this.module(0, this.numcols - 1, pos, 5);\n    this.module(1, this.numcols - 3, pos, 6);\n    this.module(1, this.numcols - 2, pos, 7);\n    this.module(1, this.numcols - 1, pos, 8);\n  };\n  return DefaultPlacement;\n}();\nexport default DefaultPlacement;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}